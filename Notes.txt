143 -> duplicate articles
3573 false -> 3436 false

True --> 1277
False --> 3436
False/True --> 2.6906812842599845
               ~2.7



************************
To Do
************************
- Web Scraper
    - BeautifulSoup
    - Grabs first 30 results from google search
        - Takes body

- Stance Determination
    - liblinearutil
        - train()
            -> -s 6  L1 regularized logistic regression
            -> -wi 4 -c 1 weight support more heavily to balance training data

- Predicting
    - -> -q for quiet prediction
    - -> -b 1 for full prob output

Google Search
    - https://www.google.com/search?q=test+this
        import requests
        def googleSearch(query):
            with requests.session() as c:
                url = 'https://www.google.co.in'
                query = {'q': query}
                urllink = requests.get(url, params=query)
                print urllink.url
        googleSearch('Linkin Park')


- Credibility Assessment
    - During testing
        - Keep track of # of correct stances and incorrect stances
    - Reliability = sum(supportWhenTrue, refuteWhenFalst)/#articles
    - 0.5 is baseline
        - If websource not previously seen (or maybe not enough evidence?)

************************
Resources
************************
    Web Scraping
        - BeautifulSoup
            - Dissect HTML files
            - https://www.geeksforgeeks.org/performing-google-search-using-python-code/
        - Scrapy
            - Pull html pages
        - Selenium?

    NLTK
        - Punctuation counts as a word, can remove it
        - Chunk sentences
        - Use to remove people's and place's names (NNP...)
        - https://pythonprogramming.net/natural-language-toolkit-nltk-part-speech-tagging/

    LibLinear -> classifier
        - https://www.csie.ntu.edu.tw/~cjlin/liblinear/#download
    
    sklearn
        - python machine learning lib?


************************
Extensions??
************************
- See how well article titles predict validity 
- Measure overlap of stemmed claims and articles

- Replace named entity of the claim in the article with stemmed? 
    - Or with 'ClaimEntity'
    - Check bigram and trigram interactions?